// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(FoodieContext))]
    [Migration("20230718212843_TestMigration")]
    partial class TestMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("API.Entities.Bearing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Bearing");
                });

            modelBuilder.Entity("API.Entities.BookmarkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookmarkId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookmarksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookmarksId");

                    b.HasIndex("RecipeId");

                    b.ToTable("BookmarkItem");
                });

            modelBuilder.Entity("API.Entities.Bookmarks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalBookmarks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("API.Entities.FavoriteRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoritesNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FavoritesId");

                    b.HasIndex("RecipeId");

                    b.ToTable("FavoriteRecipe");
                });

            modelBuilder.Entity("API.Entities.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFavRecipes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFavRestaurants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("API.Entities.RatedRecipes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RatedRecipes");
                });

            modelBuilder.Entity("API.Entities.RatedRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RatedRestaurants");
                });

            modelBuilder.Entity("API.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingNum")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("API.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CookTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageSrc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RatedRecipesId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RatingRecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RatedRecipesId");

                    b.HasIndex("RatingRecipeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("API.Entities.References.FavoriteRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoritesNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FavoritesId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FavoriteRestaurant");
                });

            modelBuilder.Entity("API.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RatedRestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RatingRestaurantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RatedRestaurantId");

                    b.HasIndex("RatingRestaurantId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Bearing", b =>
                {
                    b.HasOne("API.Entities.Restaurant", null)
                        .WithOne("Geolocation")
                        .HasForeignKey("API.Entities.Bearing", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.BookmarkItem", b =>
                {
                    b.HasOne("API.Entities.Bookmarks", null)
                        .WithMany("Recipes")
                        .HasForeignKey("BookmarksId");

                    b.HasOne("API.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("API.Entities.FavoriteRecipe", b =>
                {
                    b.HasOne("API.Entities.Favorites", "Favorites")
                        .WithMany("Recipes")
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorites");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("API.Entities.Recipe", b =>
                {
                    b.HasOne("API.Entities.RatedRecipes", null)
                        .WithMany("Recipes")
                        .HasForeignKey("RatedRecipesId");

                    b.HasOne("API.Entities.Rating", "RatingRecipe")
                        .WithMany()
                        .HasForeignKey("RatingRecipeId");

                    b.Navigation("RatingRecipe");
                });

            modelBuilder.Entity("API.Entities.References.FavoriteRestaurant", b =>
                {
                    b.HasOne("API.Entities.Favorites", "Favorites")
                        .WithMany("Restaurants")
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorites");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("API.Entities.Restaurant", b =>
                {
                    b.HasOne("API.Entities.RatedRestaurant", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("RatedRestaurantId");

                    b.HasOne("API.Entities.Rating", "RatingRestaurant")
                        .WithMany()
                        .HasForeignKey("RatingRestaurantId");

                    b.Navigation("RatingRestaurant");
                });

            modelBuilder.Entity("API.Entities.Bookmarks", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("API.Entities.Favorites", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("API.Entities.RatedRecipes", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("API.Entities.RatedRestaurant", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("API.Entities.Restaurant", b =>
                {
                    b.Navigation("Geolocation");
                });
#pragma warning restore 612, 618
        }
    }
}
